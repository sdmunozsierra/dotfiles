{
  "{\"filename\":\"/home/keanue/.cache/pacaur/nylas-mail-git/src/nylas-mail/scripts/postinstall.es6\",\"env\":{\"development\":{\"plugins\":[]}},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceMaps\":\"inline\",\"sourceRoot\":\"/home/keanue/.cache/pacaur/nylas-mail-git/src/nylas-mail/scripts\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":false,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator",
        "interopRequireDefault"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "fs-plus",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "fs"
              }
            ]
          },
          {
            "source": "path",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "path"
              }
            ]
          },
          {
            "source": "child_process",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "childProcess"
              }
            ]
          }
        ],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/home/keanue/.cache/pacaur/nylas-mail-git/src/nylas-mail/scripts/postinstall.es6",
      "filenameRelative": "/home/keanue/.cache/pacaur/nylas-mail-git/src/nylas-mail/scripts/postinstall.es6",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "postinstall.es6",
      "sourceFileName": "postinstall.es6",
      "sourceRoot": "/home/keanue/.cache/pacaur/nylas-mail-git/src/nylas-mail/scripts",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/home/keanue/.cache/pacaur/nylas-mail-git/src/nylas-mail/scripts",
      "moduleIds": false,
      "passPerPreset": false,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "postinstall"
    },
    "ignored": false,
    "code": "'use strict';\n\nlet spawn = (() => {\n  var _ref = _asyncToGenerator(function* (cmd, args, opts = {}) {\n    return new Promise(function (resolve, reject) {\n      const options = Object.assign({ stdio: 'inherit' }, opts);\n      const proc = _child_process2.default.spawn(cmd, args, options);\n      proc.on(\"error\", reject);\n      proc.on(\"exit\", resolve);\n    });\n  });\n\n  return function spawn(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();\n\nlet lernaBootstrap = (() => {\n  var _ref2 = _asyncToGenerator(function* (installTarget) {\n    console.log(\"\\n---> Installing packages\");\n    const lernaCmd = process.platform === 'win32' ? 'lerna.cmd' : 'lerna';\n    const args = [\"bootstrap\"];\n    switch (installTarget) {\n      case TARGET_CLIENT:\n        args.push(`--ignore='cloud-*'`);\n        break;\n      case TARGET_CLOUD:\n        args.push(`--ignore='client-*'`);\n        break;\n      default:\n        break;\n    }\n    yield spawn(_path2.default.join('node_modules', '.bin', lernaCmd), args);\n  });\n\n  return function lernaBootstrap(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n})();\n\nlet npm = (() => {\n  var _ref3 = _asyncToGenerator(function* (cmd, options) {\n    var _Object$assign = Object.assign({ cwd: '.', env: 'system' }, options);\n\n    const cwd = _Object$assign.cwd,\n          env = _Object$assign.env;\n\n    const npmCmd = process.platform === 'win32' ? 'npm.cmd' : 'npm';\n    yield spawn(npmCmd, [cmd], {\n      cwd: _path2.default.resolve(__dirname, '..', cwd),\n      env: npmEnvs[env]\n    });\n  });\n\n  return function npm(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n})();\n\nlet electronRebuild = (() => {\n  var _ref4 = _asyncToGenerator(function* () {\n    if (!_fsPlus2.default.existsSync(_path2.default.join(\"packages\", \"client-app\", \"apm\"))) {\n      console.log(\"\\n---> No client app to rebuild. Moving on\");\n      return;\n    }\n    yield npm('install', {\n      cwd: _path2.default.join('packages', 'client-app', 'apm'),\n      env: 'apm'\n    });\n    yield npm('rebuild', {\n      cwd: _path2.default.join('packages', 'client-app'),\n      env: 'electron'\n    });\n  });\n\n  return function electronRebuild() {\n    return _ref4.apply(this, arguments);\n  };\n})();\n\nlet main = (() => {\n  var _ref5 = _asyncToGenerator(function* () {\n    try {\n      const installTarget = getInstallTarget();\n      console.log(`\\n---> Installing for target ${installTarget}`);\n\n      if ([TARGET_ALL, TARGET_CLIENT].includes(installTarget)) {\n        installPrivateResources();\n        installClientSyncPackage();\n      }\n\n      yield lernaBootstrap(installTarget);\n\n      if ([TARGET_ALL, TARGET_CLIENT].includes(installTarget)) {\n        if (process.platform === \"darwin\") {\n          // Given that `lerna bootstrap` does not install optional dependencies, we\n          // need to manually run `npm install` inside `client-app` so\n          // `node-mac-notifier` get's correctly installed and included in the build\n          // See https://github.com/lerna/lerna/issues/121\n          console.log(\"\\n---> Reinstalling client-app dependencies to include optional dependencies\");\n          yield npm('install', { cwd: 'packages/client-app' });\n        }\n        yield electronRebuild();\n        linkJasmineConfigs();\n        linkIsomorphicCoreSpecs();\n      }\n    } catch (err) {\n      console.error(err);\n      process.exit(1);\n    }\n  });\n\n  return function main() {\n    return _ref5.apply(this, arguments);\n  };\n})();\n\nvar _fsPlus = require('fs-plus');\n\nvar _fsPlus2 = _interopRequireDefault(_fsPlus);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _child_process = require('child_process');\n\nvar _child_process2 = _interopRequireDefault(_child_process);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nconst TARGET_ALL = 'all';\nconst TARGET_CLOUD = 'cloud';\nconst TARGET_CLIENT = 'client';\n\nfunction unlinkIfExistsSync(p) {\n  try {\n    if (_fsPlus2.default.lstatSync(p)) {\n      _fsPlus2.default.removeSync(p);\n    }\n  } catch (err) {\n    return;\n  }\n}\n\nfunction copyErrorLoggerExtensions(privateDir) {\n  const from = _path2.default.join(privateDir, 'src');\n  const to = _path2.default.resolve(_path2.default.join('packages', 'client-app', 'src'));\n  unlinkIfExistsSync(_path2.default.join(to, 'error-logger-extensions'));\n  _fsPlus2.default.copySync(from, to);\n}\n\nfunction installClientSyncPackage() {\n  console.log(\"\\n---> Linking client-sync\");\n  // link client-sync\n  const clientSyncDir = _path2.default.resolve(_path2.default.join('packages', 'client-sync'));\n  const destination = _path2.default.resolve(_path2.default.join('packages', 'client-app', 'internal_packages', 'client-sync'));\n  unlinkIfExistsSync(destination);\n  _fsPlus2.default.symlinkSync(clientSyncDir, destination, 'dir');\n}\n\nfunction installPrivateResources() {\n  console.log(\"\\n---> Linking private plugins\");\n  const privateDir = _path2.default.resolve(_path2.default.join('packages', 'client-private-plugins'));\n  if (!_fsPlus2.default.existsSync(privateDir)) {\n    console.log(\"\\n---> No client app to link. Moving on\");\n    return;\n  }\n\n  copyErrorLoggerExtensions(privateDir);\n\n  // link private plugins\n  for (const plugin of _fsPlus2.default.readdirSync(_path2.default.join(privateDir, 'packages'))) {\n    const from = _path2.default.resolve(_path2.default.join(privateDir, 'packages', plugin));\n    const to = _path2.default.resolve(_path2.default.join('packages', 'client-app', 'internal_packages', plugin));\n    unlinkIfExistsSync(to);\n    _fsPlus2.default.symlinkSync(from, to, 'dir');\n  }\n}\n\nconst npmEnvs = {\n  system: process.env,\n  apm: Object.assign({}, process.env, {\n    NPM_CONFIG_TARGET: '0.10.40'\n  }),\n  electron: Object.assign({}, process.env, {\n    NPM_CONFIG_TARGET: '1.4.15',\n    NPM_CONFIG_ARCH: process.arch,\n    NPM_CONFIG_TARGET_ARCH: process.arch,\n    NPM_CONFIG_DISTURL: 'https://atom.io/download/electron',\n    NPM_CONFIG_RUNTIME: 'electron',\n    NPM_CONFIG_BUILD_FROM_SOURCE: true\n  })\n};\n\nconst getJasmineDir = packageName => _path2.default.resolve(_path2.default.join('packages', packageName, 'spec', 'jasmine'));\nconst getJasmineConfigPath = packageName => _path2.default.resolve(_path2.default.join(getJasmineDir(packageName), 'config.json'));\n\nfunction linkJasmineConfigs() {\n  console.log(\"\\n---> Linking Jasmine configs\");\n  const linkToPackages = ['cloud-api', 'cloud-core', 'cloud-workers'];\n  const from = getJasmineConfigPath('isomorphic-core');\n  for (const packageName of linkToPackages) {\n    const packageDir = _path2.default.join('packages', packageName);\n    if (!_fsPlus2.default.existsSync(packageDir)) {\n      console.log(\"\\n---> No cloud packages to link. Moving on\");\n      return;\n    }\n\n    const jasmineDir = getJasmineDir(packageName);\n    if (!_fsPlus2.default.existsSync(jasmineDir)) {\n      _fsPlus2.default.mkdirSync(jasmineDir);\n    }\n    const to = getJasmineConfigPath(packageName);\n    unlinkIfExistsSync(to);\n    _fsPlus2.default.symlinkSync(from, to, 'file');\n  }\n}\n\nfunction linkIsomorphicCoreSpecs() {\n  console.log(\"\\n---> Linking isomorphic-core specs to client-app specs\");\n  const from = _path2.default.resolve(_path2.default.join('packages', 'isomorphic-core', 'spec'));\n  const to = _path2.default.resolve(_path2.default.join('packages', 'client-app', 'spec', 'isomorphic-core'));\n  unlinkIfExistsSync(to);\n  _fsPlus2.default.symlinkSync(from, to, 'dir');\n}\n\nfunction getInstallTarget() {\n  const INSTALL_TARGET = process.env.INSTALL_TARGET;\n\n  if (!INSTALL_TARGET) {\n    return TARGET_ALL;\n  }\n  if (![TARGET_ALL, TARGET_CLIENT, TARGET_CLOUD].includes(INSTALL_TARGET)) {\n    throw new Error(`postinstall: INSTALL_TARGET must be one of client, cloud, or all. It was set to ${INSTALL_TARGET}`);\n  }\n  return INSTALL_TARGET;\n}\n\nmain();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "postinstall.es6"
      ],
      "names": [
        "cmd",
        "args",
        "opts",
        "Promise",
        "resolve",
        "reject",
        "options",
        "Object",
        "assign",
        "stdio",
        "proc",
        "spawn",
        "on",
        "installTarget",
        "console",
        "log",
        "lernaCmd",
        "process",
        "platform",
        "TARGET_CLIENT",
        "push",
        "TARGET_CLOUD",
        "join",
        "lernaBootstrap",
        "cwd",
        "env",
        "npmCmd",
        "__dirname",
        "npmEnvs",
        "npm",
        "existsSync",
        "electronRebuild",
        "getInstallTarget",
        "TARGET_ALL",
        "includes",
        "installPrivateResources",
        "installClientSyncPackage",
        "linkJasmineConfigs",
        "linkIsomorphicCoreSpecs",
        "err",
        "error",
        "exit",
        "main",
        "unlinkIfExistsSync",
        "p",
        "lstatSync",
        "removeSync",
        "copyErrorLoggerExtensions",
        "privateDir",
        "from",
        "to",
        "copySync",
        "clientSyncDir",
        "destination",
        "symlinkSync",
        "plugin",
        "readdirSync",
        "system",
        "apm",
        "NPM_CONFIG_TARGET",
        "electron",
        "NPM_CONFIG_ARCH",
        "arch",
        "NPM_CONFIG_TARGET_ARCH",
        "NPM_CONFIG_DISTURL",
        "NPM_CONFIG_RUNTIME",
        "NPM_CONFIG_BUILD_FROM_SOURCE",
        "getJasmineDir",
        "packageName",
        "getJasmineConfigPath",
        "linkToPackages",
        "packageDir",
        "jasmineDir",
        "mkdirSync",
        "INSTALL_TARGET",
        "Error"
      ],
      "mappings": "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",
      "file": "postinstall.es6",
      "sourceRoot": "/home/keanue/.cache/pacaur/nylas-mail-git/src/nylas-mail/scripts",
      "sourcesContent": [
        "import fs from 'fs-plus'\nimport path from 'path'\nimport childProcess from 'child_process'\n\nconst TARGET_ALL = 'all'\nconst TARGET_CLOUD = 'cloud'\nconst TARGET_CLIENT = 'client'\n\nasync function spawn(cmd, args, opts = {}) {\n  return new Promise((resolve, reject) => {\n    const options = Object.assign({stdio: 'inherit'}, opts);\n    const proc = childProcess.spawn(cmd, args, options)\n    proc.on(\"error\", reject)\n    proc.on(\"exit\", resolve)\n  })\n}\n\nfunction unlinkIfExistsSync(p) {\n  try {\n    if (fs.lstatSync(p)) {\n      fs.removeSync(p);\n    }\n  } catch (err) {\n    return\n  }\n}\n\nfunction copyErrorLoggerExtensions(privateDir) {\n  const from = path.join(privateDir, 'src')\n  const to = path.resolve(path.join('packages', 'client-app', 'src'))\n  unlinkIfExistsSync(path.join(to, 'error-logger-extensions'));\n  fs.copySync(from, to);\n}\n\nfunction installClientSyncPackage() {\n  console.log(\"\\n---> Linking client-sync\")\n  // link client-sync\n  const clientSyncDir = path.resolve(path.join('packages', 'client-sync'));\n  const destination = path.resolve(path.join('packages', 'client-app', 'internal_packages', 'client-sync'));\n  unlinkIfExistsSync(destination);\n  fs.symlinkSync(clientSyncDir, destination, 'dir');\n}\n\nfunction installPrivateResources() {\n  console.log(\"\\n---> Linking private plugins\")\n  const privateDir = path.resolve(path.join('packages', 'client-private-plugins'))\n  if (!fs.existsSync(privateDir)) {\n    console.log(\"\\n---> No client app to link. Moving on\")\n    return;\n  }\n\n  copyErrorLoggerExtensions(privateDir)\n\n  // link private plugins\n  for (const plugin of fs.readdirSync(path.join(privateDir, 'packages'))) {\n    const from = path.resolve(path.join(privateDir, 'packages', plugin));\n    const to = path.resolve(path.join('packages', 'client-app', 'internal_packages', plugin));\n    unlinkIfExistsSync(to);\n    fs.symlinkSync(from, to, 'dir');\n  }\n}\n\nasync function lernaBootstrap(installTarget) {\n  console.log(\"\\n---> Installing packages\");\n  const lernaCmd = process.platform === 'win32' ? 'lerna.cmd' : 'lerna';\n  const args = [\"bootstrap\"]\n  switch (installTarget) {\n    case TARGET_CLIENT:\n      args.push(`--ignore='cloud-*'`)\n      break\n    case TARGET_CLOUD:\n      args.push(`--ignore='client-*'`)\n      break\n    default:\n      break\n  }\n  await spawn(path.join('node_modules', '.bin', lernaCmd), args)\n}\n\nconst npmEnvs = {\n  system: process.env,\n  apm: Object.assign({}, process.env, {\n    NPM_CONFIG_TARGET: '0.10.40',\n  }),\n  electron: Object.assign({}, process.env, {\n    NPM_CONFIG_TARGET: '1.4.15',\n    NPM_CONFIG_ARCH: process.arch,\n    NPM_CONFIG_TARGET_ARCH: process.arch,\n    NPM_CONFIG_DISTURL: 'https://atom.io/download/electron',\n    NPM_CONFIG_RUNTIME: 'electron',\n    NPM_CONFIG_BUILD_FROM_SOURCE: true,\n  }),\n};\n\nasync function npm(cmd, options) {\n  const {cwd, env} = Object.assign({cwd: '.', env: 'system'}, options);\n  const npmCmd = process.platform === 'win32' ? 'npm.cmd' : 'npm'\n  await spawn(npmCmd, [cmd], {\n    cwd: path.resolve(__dirname, '..', cwd),\n    env: npmEnvs[env],\n  })\n}\n\nasync function electronRebuild() {\n  if (!fs.existsSync(path.join(\"packages\", \"client-app\", \"apm\"))) {\n    console.log(\"\\n---> No client app to rebuild. Moving on\")\n    return;\n  }\n  await npm('install', {\n    cwd: path.join('packages', 'client-app', 'apm'),\n    env: 'apm',\n  })\n  await npm('rebuild', {\n    cwd: path.join('packages', 'client-app'),\n    env: 'electron',\n  })\n}\n\nconst getJasmineDir = (packageName) => path.resolve(\n  path.join('packages', packageName, 'spec', 'jasmine')\n)\nconst getJasmineConfigPath = (packageName) => path.resolve(\n  path.join(getJasmineDir(packageName), 'config.json')\n)\n\nfunction linkJasmineConfigs() {\n  console.log(\"\\n---> Linking Jasmine configs\");\n  const linkToPackages = ['cloud-api', 'cloud-core', 'cloud-workers']\n  const from = getJasmineConfigPath('isomorphic-core')\n  for (const packageName of linkToPackages) {\n    const packageDir = path.join('packages', packageName)\n    if (!fs.existsSync(packageDir)) {\n      console.log(\"\\n---> No cloud packages to link. Moving on\")\n      return\n    }\n\n    const jasmineDir = getJasmineDir(packageName)\n    if (!fs.existsSync(jasmineDir)) {\n      fs.mkdirSync(jasmineDir)\n    }\n    const to = getJasmineConfigPath(packageName)\n    unlinkIfExistsSync(to)\n    fs.symlinkSync(from, to, 'file')\n  }\n}\n\nfunction linkIsomorphicCoreSpecs() {\n  console.log(\"\\n---> Linking isomorphic-core specs to client-app specs\")\n  const from = path.resolve(path.join('packages', 'isomorphic-core', 'spec'))\n  const to = path.resolve(path.join('packages', 'client-app', 'spec', 'isomorphic-core'))\n  unlinkIfExistsSync(to)\n  fs.symlinkSync(from, to, 'dir')\n}\n\nfunction getInstallTarget() {\n  const {INSTALL_TARGET} = process.env\n  if (!INSTALL_TARGET) {\n    return TARGET_ALL\n  }\n  if (![TARGET_ALL, TARGET_CLIENT, TARGET_CLOUD].includes(INSTALL_TARGET)) {\n    throw new Error(`postinstall: INSTALL_TARGET must be one of client, cloud, or all. It was set to ${INSTALL_TARGET}`)\n  }\n  return INSTALL_TARGET\n}\n\nasync function main() {\n  try {\n    const installTarget = getInstallTarget()\n    console.log(`\\n---> Installing for target ${installTarget}`);\n\n    if ([TARGET_ALL, TARGET_CLIENT].includes(installTarget)) {\n      installPrivateResources()\n      installClientSyncPackage()\n    }\n\n    await lernaBootstrap(installTarget);\n\n    if ([TARGET_ALL, TARGET_CLIENT].includes(installTarget)) {\n      if (process.platform === \"darwin\") {\n        // Given that `lerna bootstrap` does not install optional dependencies, we\n        // need to manually run `npm install` inside `client-app` so\n        // `node-mac-notifier` get's correctly installed and included in the build\n        // See https://github.com/lerna/lerna/issues/121\n        console.log(\"\\n---> Reinstalling client-app dependencies to include optional dependencies\");\n        await npm('install', {cwd: 'packages/client-app'})\n      }\n      await electronRebuild();\n      linkJasmineConfigs();\n      linkIsomorphicCoreSpecs();\n    }\n  } catch (err) {\n    console.error(err);\n    process.exit(1);\n  }\n}\nmain()\n"
      ]
    },
    "mtime": 1502303199702
  }
}